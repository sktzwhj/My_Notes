Authors: Joao Paulo et al. from the University of Minho
Published in ACM Trans. on Storage 
Date: Jan 10th, 2016

实际上这篇文章是很久以前就读了的，但是开始一直没有怎么读明白。　

这篇文章中一直强调一个CoW的问题，基本想法是这样的:

因为本文是一个离线的工作，所以可能导致的问题是这样的。 比如LBA1正在被做offline deduplication，而且原来的块映射关系是LBA1 -> PBA1那么为了防止这
段时间block A被修改了，就需要对其进行CoW。 但是这时候来了一个请求B，这个请求B也是对LBA1的修改，由于CoW，这个请求会被写到一个新的块。 于是在块映射关
系里面就会有LBA1->PBA2的映射关系。 但是这个时候如果最开始LBA1中的数据被验证的确是一个duplicate，就会使得LBA1的块地址映射关系又被修改，这时变成
LBA1->PBA3，那么刚才写到LBA1的PBA2的内容就没有了，而且不久就可能被垃圾回收。 

那么本文的解决方案是这样的，如果检测到一个deduplication动作导致了一个悬空PBA的产生，那么这个操作就需要rollback。